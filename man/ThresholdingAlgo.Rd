% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ThresholdingAlgo.R
\name{ThresholdingAlgo}
\alias{ThresholdingAlgo}
\title{Thresholding Algorithm for Peak and Valley Detection
obtained from Stackoverflow : https://stackoverflow.com/questions/72784873/conditional-peak-valley-signal-detection-in-realtime-timeseries-data-r}
\usage{
ThresholdingAlgo(y, lag = 100, threshold = 3, influence = 0)
}
\arguments{
\item{y}{A numeric vector representing the time series data.}

\item{lag}{An integer specifying the number of observations to use for the moving window average and standard deviation. Defaults to 100.}

\item{threshold}{A numeric value defining the number of standard deviations that a data point must deviate from the moving average to be considered a signal (either peak or valley). Defaults to 3.}

\item{influence}{A numeric value between 0 and 1 that controls how much influence a new signal has on the filtered time series. If \code{influence = 1}, the algorithm reacts fully to new signals, while \code{influence = 0} ignores new signals. Defaults to 0.}
}
\value{
A list containing the following components:
\itemize{
\item \code{signals}: A vector where 1 represents a peak, -1 represents a valley, and 0 indicates no signal.
\item \code{avgFilter}: The filtered moving average at each point.
\item \code{stdFilter}: The filtered moving standard deviation at each point.
}
}
\description{
This function detects peaks and valleys in a time series using a threshold-based approach. It identifies significant deviations from a moving average using a threshold based on standard deviations and an influence factor to control the response to new signals.
}
\details{
The algorithm works by:
\itemize{
\item Calculating a moving average and standard deviation over a specified \code{lag}.
\item Comparing new data points with the previous moving average.
\item Flagging points that deviate more than \code{threshold} times the standard deviation from the average as a signal (1 for peak, -1 for valley).
\item Updating the moving average and standard deviation based on the influence of the new signals.
}
}
\examples{
# Simulated example data
set.seed(42)
data <- cumsum(rnorm(200))  # Random walk data
result <- ThresholdingAlgo(y = data, lag = 30, threshold = 3, influence = 0.5)

# Plot results
plot(data, type = "l", main = "Peak and Valley Detection", col = "black")
points(which(result$signals == 1), data[result$signals == 1], col = "blue", pch = 19)  # Peaks
points(which(result$signals == -1), data[result$signals == -1], col = "red", pch = 19)  # Valleys

}
