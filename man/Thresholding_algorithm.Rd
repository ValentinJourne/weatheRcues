% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Thresholding_algorithm.R
\name{Thresholding_algorithm}
\alias{Thresholding_algorithm}
\title{Detect Peaks and Valleys Using a Robust Thresholding Algorithm}
\usage{
Thresholding_algorithm(y, lag = 100, threshold = 3, influence = 0)
}
\arguments{
\item{y}{A numeric vector representing the time series to analyze.}

\item{lag}{Integer. The size of the moving window used to compute the rolling mean and standard deviation. Default is 100.}

\item{threshold}{Numeric. The number of standard deviations a new value must differ from the rolling mean to be classified as a signal. Default is 3.}

\item{influence}{Numeric (between 0 and 1). Determines how much influence a detected signal has on the recalculation of mean and standard deviation.
An influence of 0 means signals are completely excluded from future statistics (more robust); 1 means full influence (less robust). Default is 0.}
}
\value{
A list with the following elements:
\describe{
\item{signals}{An integer vector of the same length as \code{y} containing 1 (peak), -1 (valley), or 0 (no signal).}
\item{avgFilter}{A numeric vector with the rolling mean used at each step.}
\item{stdFilter}{A numeric vector with the rolling standard deviation used at each step.}
}
}
\description{
Implements a real-time peak and valley detection algorithm based on a moving average and standard deviation filter.
This method is robust to signal autocorrelation and was adapted from a community solution on StackOverflow:
\url{https://stackoverflow.com/questions/72784873/conditional-peak-valley-signal-detection-in-realtime-timeseries-data-r}.
}
\details{
The algorithm identifies peaks and valleys by comparing each new observation to a rolling mean and standard deviation.
If a point deviates from the mean by more than \code{threshold} times the rolling standard deviation, it is classified as a signal:
\itemize{
\item \code{1} for a peak,
\item \code{-1} for a valley,
\item \code{0} for no signal.
}

After each signal is detected, the moving mean and standard deviation are updated using the \code{influence} parameter to moderate the impact of the signal on future values.
}
\examples{
set.seed(42)
data <- cumsum(rnorm(200))  # Simulate time series
result <- Thresholding_algorithm(data, lag = 30, threshold = 3, influence = 0.5)

plot(data, type = "l", main = "Peak and Valley Detection", col = "gray")
points(which(result$signals == 1), data[result$signals == 1], col = "blue", pch = 19)  # Peaks
points(which(result$signals == -1), data[result$signals == -1], col = "red", pch = 19)  # Valleys

}
